const express = require("express");
const sqlite3 = require("sqlite3");
const { open } = require("sqlite");
const path = require("path");
const app = express();
const dbPath = path.join(__dirname, "moviesData.db");
app.use(express.json());
let db = null;
const initializeDbAndServer = async () => {
  try {
    db = await open({ filename: dbPath, driver: sqlite3.Database });
    app.listen(3000, () => {
      console.log("Server Is running on http://localhost:3000");
    });
  } catch (error) {
    console.log(`Data base Error is ${error}`);
    process.exit(1);
  }
};
initializeDbAndServer();

const convertDbObject1 = (objectItem) => {
  return {
    movieName: objectItem.movie_name,
  };
};

//API 1:Returns a list of all movie names in the movie table
app.get("/movies/", async (request, response) => {
  const movieNameQuery = `SELECT movie_name FROM movie;`;
  const movieNameQueryRes = await db.all(movieNameQuery);
  response.send(
    movieNameQueryRes.map((eachMovie) => convertDbObject1(eachMovie))
  );
});

//API 2:Creates a new movie in the movie table. movie_id is auto-incremented

app.post("/movies5/", async (request, response) => {
  const { directorId, movieName, leadActor } = request.body;
  const createMovieQuery = `INSERT INTO movie(director_id,movie_name,lead_actor) 
    VALUES('${directorId}','${movieName}','${leadActor}');`;
  const createMovieQueryRes = await db.run(createMovieQuery);
  response.send("Movie Successfully Added");
});

//API 3:Returns a movie based on the movie ID
const convertDbObject3 = (objectItem) => {
  return {
    movieId: objectItem.movie_id,
    directorId: objectItem.director_id,
    movieName: objectItem.movie_name,
    leadActor: objectItem.lead_actor,
  };
};

app.get("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const getmovieQuery = `SELECT * FROM movie WHERE movie_id=${movieId};`;
  const getmovieQueryRes = await db.get(getmovieQuery);
  response.send(convertDbObject3(getmovieQueryRes));
});

//API 4:Updates the details of a movie in the movie table based on the movie ID

app.put("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const { directorId, movieName, leadActor } = request.body;
  const updateMovieQuery = `UPDATE movie SET director_id=${directorId},
    movie_name=${movieName},lead_actor=${leadActor} WHERE movie_id=${movieId};`;
  const updateMovieQueryRes = await db.run(updateMovieQuery);
  response.send("Movie Details Updated");
});

//API 5:Deletes a movie from the movie table based on the movie ID

app.delete("/movies/:movieId", async (request, response) => {
  const { movieId } = request.params;
  const deletemovieQuery = `DELETE FROM movie WHERE movie_id=${movieId};`;
  const deletemovieQueryRes = await db.run(deletemovieQuery);
  response.send("Movie Removed");
});

//API 6:Returns a list of all directors in the director table
const convertDbObject6 = (objectItem) => {
  return {
    directorId: objectItem.director_id,
    directorName: objectItem.director_name,
  };
};

app.get("/directors/", async (request, response) => {
  const directorNameQuery = `SELECT * FROM director;`;
  const directorNameQueryRes = await db.all(directorNameQuery);
  response.send(
    directorNameQueryRes.map((eachItem) => convertDbObject6(eachItem))
  );
});

//API 7:Returns a list of all movie names directed by a specific director

app.get("/directors/:directorId/movies/", async (request, response) => {
  const { directorId } = request.params;
  const directorMovieNameQuery = `SELECT movie_name as movieName FROM movie WHERE dirctor_id=${directorId};`;
  const directorMovieNameQueryRes = await db.all(directorMovieNameQuery);
  response.send(directorMovieNameQueryRes);
});

module.exports = app;

